import tkinter as tk
from tkinter import colorchooser, filedialog, messagebox
from PIL import Image, ImageDraw

class MirageEditor:
    def __init__(self, root):
        self.root = root
        self.root.title("Mirage Logo")
        self.root.iconbitmap('C:\Users\kolom\Downloads\Mirage Logo')  # Замените 'icon.ico' на путь к вашей иконке

        self.current_color = "black"
        self.current_brush_size = 2
        self.canvas_width = 400
        self.canvas_height = 400

        self.create_widgets()
        self.setup_canvas()

    def create_widgets(self):
        # Создание кнопок
        self.color_button = tk.Button(self.root, text="Цвет", command=self.choose_color)
        self.size_button = tk.Button(self.root, text="Размер кисти", command=self.choose_brush_size)
        self.clear_button = tk.Button(self.root, text="Стереть", command=self.clear_canvas)
        self.save_button = tk.Button(self.root, text="Сохранить", command=self.save_image)
        self.info_button = tk.Button(self.root, text="О программе", command=self.show_about_dialog)
        self.canvas_size_button = tk.Button(self.root, text="Размер холста", command=self.change_canvas_size)

        # Размещение кнопок
        self.color_button.pack(side="left")
        self.size_button.pack(side="left")
        self.clear_button.pack(side="left")
        self.save_button.pack(side="left")
        self.info_button.pack(side="left")
        self.canvas_size_button.pack(side="left")

        # Создание холста
        self.canvas = tk.Canvas(self.root, width=self.canvas_width, height=self.canvas_height, bg="white")
        self.canvas.pack()

        self.canvas.bind("<Button-1>", self.start_drawing)
        self.canvas.bind("<B1-Motion>", self.draw)
        self.canvas.bind("<ButtonRelease-1>", self.stop_drawing)

        self.drawing = False
        self.last_x, self.last_y = None, None
        self.image = Image.new("RGB", (self.canvas_width, self.canvas_height), "white")
        self.draw = ImageDraw.Draw(self.image)

    def start_drawing(self, event):
        self.drawing = True
        self.last_x, self.last_y = event.x, event.y

    def draw(self, event):
        if self.drawing:
            x, y = event.x, event.y
            self.canvas.create_line(self.last_x, self.last_y, x, y, fill=self.current_color, width=self.current_brush_size)
            self.draw.line([self.last_x, self.last_y, x, y], fill=self.current_color, width=self.current_brush_size)
            self.last_x, self.last_y = x, y

    def stop_drawing(self, event
    def choose_color(self):
        color = colorchooser.askcolor(title="Выберите цвет")[1]
        if color:
            self.current_color = color

    def choose_brush_size(self):
        size = simpledialog.askinteger("Размер кисти", "Введите размер кисти:", initialvalue=self.current_brush_size, minvalue=1)
        if size:
            self.current_brush_size = size

    def clear_canvas(self):
        self.canvas.delete("all")
        self.image = Image.new("RGB", (self.canvas_width, self.canvas_height), "white")
        self.draw = ImageDraw.Draw(self.image)

    def save_image(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG files", "*.png"), ("JPEG files", "*.jpeg")])
        if file_path:
            try:
                self.image.save(file_path)
                messagebox.showinfo("Mirage", "Изображение успешно сохранено.")
            except Exception as e:
                messagebox.showerror("Mirage", f"Ошибка при сохранении изображения: {str(e)}")

    def show_about_dialog(self):
        messagebox.showinfo("О программе", "Mirage - ваш простой графический редактор.\nРазработчики: [ваше имя и др.]")

    def change_canvas_size(self):
        new_width = simpledialog.askinteger("Размер холста", "Введите новую ширину холста в пикселях:", initialvalue=self.canvas_width, minvalue=1)
        new_height = simpledialog.askinteger("Размер холста", "Введите новую высоту холста в
